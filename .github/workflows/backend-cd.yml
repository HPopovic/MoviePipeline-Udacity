name: backend-cd-workflow

on:
  # Run on demand
  workflow_dispatch:
  # Run when push event to main branch, only when backend code is changed
  push:
    branches: 
      - main
    #paths:
    #  - '**/backend/**'

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      # Check out the code from the repository.
      - uses: actions/checkout@v3

      # Set up a python environment.
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pipenv'
          cache-dependency-path: '**/backend/Pipfile.lock'
      - run: python -m pip install --upgrade pip
 
      # Cache action to restore cache.

      # Install the dependencies using pipenv
      - name: Install pipenv
        run: curl https://raw.githubusercontent.com/pypa/pipenv/master/get-pipenv.py | python
      - run: cd starter/backend && pipenv install --dev

      # Run the linter.
      - run: cd starter/backend && pipenv run lint

  test:
    runs-on: ubuntu-latest
    steps:
      # Check out the code from the repository.
      - uses: actions/checkout@v3

      # Set up a python environment.
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pipenv'
          cache-dependency-path: '**/backend/Pipfile.lock'
      - run: python -m pip install --upgrade pip

      # Cache action to restore cache.

      # Install the dependencies using pipenv
      - name: Install pipenv
        run: curl https://raw.githubusercontent.com/pypa/pipenv/master/get-pipenv.py | python
      - run: cd starter/backend && pipenv install


      # Run the test.
      - run: cd starter/backend && pipenv run test
      
  build-deploy:
    needs: [lint, test]

    runs-on: ubuntu-latest

    steps:
      # Check out the code from the repository.
      - uses: actions/checkout@v3

      # Set up a python environment.
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          cache: 'pipenv'
          cache-dependency-path: '**/backend/Pipfile.lock'
      - run: python -m pip install --upgrade pip

      # Cache action to restore cache.

      # Install the dependencies using pipenv
      - name: Install pipenv
        run: curl https://raw.githubusercontent.com/pypa/pipenv/master/get-pipenv.py | python
      - run: cd starter/backend && pipenv install

      # Build the application.
      - name: Build the docker image
        run: cd starter/backend && docker build --tag mp-backend:latest .

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
   
      # Deploy the application to ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        
      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: backend
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd starter/backend
          docker build --tag=$REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
      
      # Deploy the containerised image to the cluster
      - name: Update kubeconfig
        run: cd starter/backend/k8s && aws eks update-kubeconfig --name cluster

      - name: Set image tag from build stage
        run: cd starter/backend/k8s && kustomize edit set image frontend=${{ steps.login-ecr.outputs.registry }}:${{ github.sha }}

      - name: Apply the Kubernetes manifests to the cluster
        run: |
          cd starter/backend/k8s && kustomize build
          cd starter/backend/k8s && kubectl apply -f -


