name: frontend-cd-workflow

env:
  REACT_APP_MOVIE_API_URL: 'http://a7b4bbb60ad7742fc85f716158005436-2038726204.us-east-1.elb.amazonaws.com'

on:
  # Run on demand
  workflow_dispatch:
  # Run when push event to main branch, only when frontend code is changed
  push:
    branches: 
      - main
    paths:
      - '**/frontend/**'

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      # Check out the code from the repository.
      - uses: actions/checkout@v3

      # Set up a Node.js environment.
      - uses: actions/setup-node@v4
        with:
          node-version: latest
      
      # Cache action to restore cache.

      # Install the dependencies.
      - run: cd starter/frontend && npm ci

      # Run the linter.
      - run: cd starter/frontend && npm run lint

  test:
    runs-on: ubuntu-latest
    steps:
      # Check out the code from the repository.
      - uses: actions/checkout@v3

      # Set up a Node.js environment.
      - uses: actions/setup-node@v4
        with:
          node-version: latest
      
      # Cache action to restore cache.

      # Install the dependencies.
      - run: cd starter/frontend && npm ci

      # Run the test.
      - run: cd starter/frontend && npm run test
      
  build-deploy:
    needs: [lint, test]

    runs-on: ubuntu-latest

    steps:
      # Check out the code from the repository.
      - uses: actions/checkout@v3

      # Set up a Node.js environment.
      - uses: actions/setup-node@v4
        with:
          node-version: latest

      # Cache action to restore cache.
      - uses: actions/cache@v3
        with:
          path: starter/frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('starter/frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      # Install the dependencies.
      - run: cd starter/frontend && npm ci

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
   
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
        
      - name: Build, tag, and push docker image to Amazon ECR
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: frontend
          IMAGE_TAG: ${{ github.sha }}
        run: |
          cd starter/frontend
          docker build --build-arg=REACT_APP_MOVIE_API_URL=${{env.REACT_APP_MOVIE_API_URL}} --tag=$REGISTRY/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

      # Deploy the containerised image to the cluster
      - name: Update kubeconfig
        run: cd starter/frontend/k8s && aws eks update-kubeconfig --name cluster

      - name: Set image tag from build stage
        run: cd starter/frontend/k8s && kustomize edit set image frontend=${{ steps.login-ecr.outputs.registry }}/frontend:${{ github.sha }}

      - name: Apply the Kubernetes manifests to the cluster
        run: |
          cd starter/frontend/k8s
          kustomize build | kubectl apply -f -

      - name: Print application URLs
        run: |
          kubectl get svc -A

      - name: Get pods and ep
        run: |
          kubectl get pods -A
          kubectl get ep -A
